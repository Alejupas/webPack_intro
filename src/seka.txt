1. instaliuojam webPack
npm install webpack webpack-cli --save-dev

2. create .gitignore and add to it node_modules

3. iskvieciam webpacka, paruosimas produkcijai:
sugeneruojam optimalius failus (is src) i viena: (folder dist, main.js):
 npx webpack --mode production

sukompiliavimas kurimui (development mode) - IIFE imediately invoked function expression
 npx webpack --mode development

4. pasirasom dev ir build modus: package.json pasirasom new: 
"scripts": {
    "start": "npm install",
    "dev": "webpack --mode development", // developinant
    "build": "webpack --mode production" // produkcijai
  },
  ir npm run build
uzsivadinam shortcutus prie key value.. naudojam terminale
  =========================
atsisiuntus is githubo destytojo, neturim node_modules, reik npm install ir npm run(ir gitignore cj):
  git clone https://
  npm install
  npm run <kazkas> (nebutina)
  =========================
https://webpack.js.org/plugins/html-webpack-plugin/

5. idiegiam html plugina:
npm install --save-dev html-webpack-plugin

6. pasikuriu webpack.config.js ir i ji ikelt: 

const HtmlWebpackPlugin = require('html-webpack-plugin'); //is node_modules paima
const path = require('path');

pagal nutylejima webpackas main faila ima index.js kaip ENTRY POINT

module.exports = {
  entry: {},
  output: {},
  plugins: [],
};

7. ENTRY & OUTPUT & PLUGIN CONFIG
rename index.js to app.js 
webpack.config.js faile, module.export nurisodom entry ir output,prie plugin irgi prisidedam HtmlWebpackPlugin(). istrinam dist folderyje main.js, ir webpacke prie filename main.bundle.js isimetam, npm run dev arba npm run build, ir vel istrintas dist fodleryje failas main.js, atsiranda naujas, kaip main.bundle,js. dasidedu ties plugin> title: "blabla" 
vel npm run build, ir atsivaizduoja naujam sukurtam index html faile title, dist folderyje

8. pridejom prie webpack.config.js , prie plugins:
template: "src/js/index.html",
reiskias pridejom h1 i dist> index.html dinamiskai

9. installinam css loaderis is webpacko: 
npm install --save-dev css-loader style-loader
tada package.json prie dev dependencies matosi kad atsirado css-loader ir style-loader

10. prie webpack.config.js virs plugins pasidarom modules, jame rules, o jame jau test ir use. suconfigint/prisidet css ir stiliaus loaderius.
test: /\.css$/i (isimink nice)
use: rasom kuriuos css webpacko dependencies naudosim, tam kas ends in .css

11. paisrasom ka norim css faile, ir app.js (nes ENTRY POINT) jame rasom prie importu visu virsuj: import "./css/style.css"; ir tada vel terminale npm run dev(ar build). pasikeicia index.html stilius!

12. install babel: npm install -D babel-loader @babel/core @babel/preset-env
(-D is same as --save), tai rasom:
 npm install --save-dev babel-loader @babel/core @babel/preset-env

 13. webpack.config.js, po rules }, dedam kita {ir jo viduje} :
 {
        test: /\.js$/, //.js
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          options: {
            //kokio senumo js paversti veikianciu in older browsers
            presets: ["@babel/preset-env"],
          },
        },
      },

14.  webpack.config.js, export.modules virsuje pridedam:
 devtool: false, //kad geriau suprasti koda main.bundle.js dalyje(po npm run dev)

 =====================================================================
 TRANSPILING: tos pacios kalbos perdarymas i kita versija(senesne pvz)
 =====================================================================


15. Webpack Dev Server
prie webpack.config.js prie module.exports iskart po rasom:
mode: "development", tada package.json prie dev: paliekam tik webpack.

install: npm install --save-dev webpack-dev-server

16. prie webpack.config.js prie module.exports, po devtool rasom:
devServer: {
    contentBase: "./dist",
  },

  17. package.json prie scripts insert: "serve": "webpack serve --open",

  18. SOURCE MAP idedam i konfiguracija
  webpack.config.js > export.modules> devtool pakeist i "source-map"

 =====================================================================
 IMPORTANT: LIVE SERVER DEV BUS IKI KOL NEPADARYSIM CTRL + C
 =====================================================================

 19. dublikuoti  webpack.config.js, rename to: webpack.prod.js
 delete devServer, rename mode: "production", tada package.json:
 change "build" to: "webpack --config webpack.prod.js",
 uzsikomentuojham webpack.prod.js esanti "devtool": ir
 output>filename: "final.bundle.js", ir outpute, add clean: true,

 =====================================================================
 Gali turet daug terminalu running, vienas dev, kitas build , ,kitas live server
 =====================================================================

 20. package.json >scripts  , change dev to :"build:dev": "webpack",

21. newMiniCssExtract Plugin, install :
npm install --save-dev mini-css-extract-plugin

prie webpack.prod.js , prie plugins idet virsuj :new MiniCssExtractPlugin(),
tada module>rules>use , ir vietoj pirmo, idet MiniCssExtractPlugin.loader

22. webpack.prod.js > plugins: [
    new MiniCssExtractPlugin({
      idedam nauja:
      filename: "style.css", ir tada atsiras dist folderyje sugeneruotas css tavo norimas file name. gali but path: "css/style.css", tada bus matrioshka

23. Create banner. folder src> banner> create ban.js ir ban.css
ban.js pasirasom kompnenta. src>css>style.css banerio css
app.js importinam is ban.js kompnenta. here we go.

note** 
ban.js > virsuj: import "./ban.css"; o ban.css apsirasom banerio stiliu.
vis tiek viskas bus po npm run build sucompilinta i dist folderi, style.css bendra.

24. IMAGES
regexas kuris grazina visus paveikslelius
webpack.config.js > pirmas po module>rules: 
 {
        test: /\.(png|svg|jpg|jpeg|gif)$/i,
        type: "asset/resource",
      },
      src> create img folder, imetam ten img. npm run build.dev, ir atsivaizduoja dome. globaliam style.css pasitvarkom max-width (kad responsive butu)

25. ImageMinimizerPlugin from webpack
installinam  imagemin plugins for lossy optimization:
npm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo --save-dev
webpack.prod.js importinam pradzioje: 
const ImageMinimizerPlugin = require('image-minimizer-webpack-plugin');
from https://webpack.js.org/plugins/image-minimizer-webpack-plugin/
ir ties plugins sukurt virsuj nauja plugin:
  new ImageMinimizerPlugin({
      filename: "images/[name][ext]",
      plugins: [["mozjpeg", { quality: 70 }]],
    }),

    is config i prod atsikopinam ir paste ties module> rules virsuj:
  new ImageMinimizerPlugin({
      filename: "images/[name].webp",
      deleteOriginalAssets: true,
      minimizerOptions: {
        plugins: [
          ["imagemin-webp"],
          ["svgo"],
          ["gifsicle"],
          ["pngquant"],
          ["mozjpeg", { quality: 50 }],
        ],
      },
    }),