1. instaliuojam webPack
npm install webpack webpack-cli --save-dev

2. create .gitignore and add to it node_modules

3. iskvieciam webpacka, paruosimas produkcijai:
sugeneruojam optimalius failus (is src) i viena: (folder dist, main.js):
 npx webpack --mode production

sukompiliavimas kurimui (development mode) - IIFE imediately invoked function expression
 npx webpack --mode development

4. pasirasom dev ir build modus: package.json pasirasom new: 
"scripts": {
    "start": "npm install",
    "dev": "webpack --mode development", // developinant
    "build": "webpack --mode production" // produkcijai
  },
  ir npm run build
uzsivadinam shortcutus prie key value.. naudojam terminale
  =========================
atsisiuntus is githubo destytojo, neturim node_modules, reik npm install ir npm run(ir gitignore cj):
  git clone https://
  npm install
  npm run <kazkas> (nebutina)
  =========================
https://webpack.js.org/plugins/html-webpack-plugin/

5. idiegiam html plugina:
npm install --save-dev html-webpack-plugin

6. pasikuriu webpack.config.js ir i ji ikelt: 

const HtmlWebpackPlugin = require('html-webpack-plugin'); //is node_modules paima
const path = require('path');

pagal nutylejima webpackas main faila ima index.js kaip ENTRY POINT

module.exports = {
  entry: {},
  output: {},
  plugins: [],
};

7. ENTRY & OUTPUT & PLUGIN CONFIG
rename index.js to app.js 
webpack.config.js faile, module.export nurisodom entry ir output,prie plugin irgi prisidedam HtmlWebpackPlugin(). istrinam dist folderyje main.js, ir webpacke prie filename main.bundle.js isimetam, npm run dev arba npm run build, ir vel istrintas dist fodleryje failas main.js, atsiranda naujas, kaip main.bundle,js. dasidedu ties plugin> title: "blabla" 
vel npm run build, ir atsivaizduoja naujam sukurtam index html faile title, dist folderyje

8. pridejom prie webpack.config.js , prie plugins:
template: "src/js/index.html",
reiskias pridejom h1 i dist> index.html dinamiskai

9. installinam css loaderis is webpacko: 
npm install --save-dev css-loader style-loader
tada package.json prie dev dependencies matosi kad atsirado css-loader ir style-loader

10. prie webpack.config.js virs plugins pasidarom modules, jame rules, o jame jau test ir use. suconfigint/prisidet css ir stiliaus loaderius.
test: /\.css$/i (isimink nice)
use: rasom kuriuos css webpacko dependencies naudosim, tam kas ends in .css

11. paisrasom ka norim css faile, ir app.js (nes ENTRY POINT) jame rasom prie importu visu virsuj: import "./css/style.css"; ir tada vel terminale npm run dev(ar build). pasikeicia index.html stilius!

12. install babel: npm install -D babel-loader @babel/core @babel/preset-env
(-D is same as --save), tai rasom:
 npm install --save-dev babel-loader @babel/core @babel/preset-env

 13. webpack.config.js, po rules }, dedam kita {ir jo viduje} :
 {
        test: /\.js$/, //.js
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          options: {
            //kokio senumo js paversti veikianciu in older browsers
            presets: ["@babel/preset-env"],
          },
        },
      },

14.  webpack.config.js, export.modules virsuje pridedam:
 devtool: false, //kad geriau suprasti koda main.bundle.js dalyje(po npm run dev)

 =====================================================================
 TRANSPILING: tos pacios kalbos perdarymas i kita versija(senesne pvz)
 =====================================================================


15. Webpack Dev Server
prie webpack.config.js prie module.exports iskart po rasom:
mode: "development", tada package.json prie dev: paliekam tik webpack.

install: npm install --save-dev webpack-dev-server
